<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JavaScript知识点</title>
      <link href="/2018/07/18/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2018/07/18/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h3 id="JavaScript导论"><a href="#JavaScript导论" class="headerlink" title="JavaScript导论"></a>JavaScript导论</h3><p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。<br>vue中所使用的typescript被称作JavaScript的超集。</p><h3 id="JavaScript运算"><a href="#JavaScript运算" class="headerlink" title="JavaScript运算"></a>JavaScript运算</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">赋值表达式</span> <span class="string">"="</span><span class="string">:使用此表达式会给变量赋值（不可对变量进行判断)</span></span><br><span class="line"><span class="string">相等运算“==”:使用此表达式对变量进行相等判断。</span></span><br><span class="line"><span class="string">严格相等运算“===”：使用此表达式对变量的进行严格相等判断</span></span><br></pre></td></tr></table></figure><p>在使用多个ifelse时，可使用switch替换(注意使用break结束循环)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">switch(x)&#123;</span><br><span class="line">case 1;</span><br><span class="line">break;</span><br><span class="line">case 2;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>switch语句部分和case语句部分，都可以使用表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch (1 + 3) &#123;</span><br><span class="line">  case 2 + 2:</span><br><span class="line">    f();</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    neverHappens();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三目运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（条件）？表达式A：表达式B</span><br></pre></td></tr></table></figure><p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label:</span><br><span class="line">  语句</span><br></pre></td></tr></table></figure><p>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</p><p>标签通常与break语句和continue语句配合使用，跳出特定的循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">top:</span><br><span class="line">  for (var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">    for (var j = 0; j &lt; 3; j++)&#123;</span><br><span class="line">      if (i === 1 &amp;&amp; j === 1) break top;</span><br><span class="line">      console.log(&apos;i=&apos; + i + &apos;, j=&apos; + j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">// i=0, j=0</span><br><span class="line">// i=0, j=1</span><br><span class="line">// i=0, j=2</span><br><span class="line">// i=1, j=0</span><br></pre></td></tr></table></figure><p>type of<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当遇到后台传来的数据，无法判断其类型，可使用type of。</span><br></pre></td></tr></table></figure></p><p>null与undefined都可以表示“没有”，含义非常相似。将一个变量赋值为undefined或null，老实说，语法效果几乎没区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">于null和undefined，大致可以像下面这样理解。</span><br><span class="line"></span><br><span class="line">null表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入null，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入null，表示未发生错误。</span><br><span class="line">undefined表示“未定义”，下面是返回undefined的典型场景。</span><br><span class="line">// 变量声明了，但没有赋值</span><br><span class="line">var i;</span><br><span class="line">i // undefined</span><br><span class="line"></span><br><span class="line">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span><br><span class="line">function f(x) &#123;</span><br><span class="line">  return x;</span><br><span class="line">&#125;</span><br><span class="line">f() // undefined</span><br><span class="line"></span><br><span class="line">// 对象没有赋值的属性</span><br><span class="line">var  o = new Object();</span><br><span class="line">o.p // undefined</span><br><span class="line"></span><br><span class="line">// 函数没有返回值时，默认返回 undefined</span><br><span class="line">function f() &#123;&#125;</span><br><span class="line">f() // undefined</span><br></pre></td></tr></table></figure><h3 id="与数值相关的全局方法"><a href="#与数值相关的全局方法" class="headerlink" title="与数值相关的全局方法"></a>与数值相关的全局方法</h3><p>parseInt() ：parseInt方法用于将字符串转为整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;123&apos;) // 123</span><br></pre></td></tr></table></figure><p>如果字符串头部有空格，空格会被自动去除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;   81&apos;) // 81</span><br></pre></td></tr></table></figure></p><p>字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>反斜杠（\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。</p><p>需要用反斜杠转义的特殊字符，主要有下面这些。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\0 ：null（\u0000）</span><br><span class="line">\b ：后退键（\u0008）</span><br><span class="line">\f ：换页符（\u000C）</span><br><span class="line">\n ：换行符（\u000A）</span><br><span class="line">\r ：回车键（\u000D）</span><br><span class="line">\t ：制表符（\u0009）</span><br><span class="line">\v ：垂直制表符（\u000B）</span><br><span class="line">\&apos; ：单引号（\u0027）</span><br><span class="line">\&quot; ：双引号（\u0022）</span><br><span class="line">\\ ：反斜杠（\u005C）</span><br><span class="line">上面这些字符前面加上反斜杠，都表示特殊含义。</span><br></pre></td></tr></table></figure></p><h3 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h3><p>对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。</p><p>什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: &apos;Hello&apos;,</span><br><span class="line">  bar: &apos;World&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，大括号就定义了一个对象，它被赋值给变量<figure class="highlight plain"><figcaption><span>'Hello' ```，其中```foo```是“键名”（成员的名称），字符串```Hello```是“键值”（成员的值）。键名与键值之间用冒号分隔。第二个键值对是```bar: 'World'```，```bar```是键名，```World```是键值。两个键值对之间用逗号分隔。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 键名</span><br><span class="line">对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。上面的代码也可以写成下面这样。</span><br></pre></td></tr></table></figure></p><p>var obj = {<br>  ‘foo’: ‘Hello’,<br>  ‘bar’: ‘World’<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### 对象的引用</span><br><span class="line"></span><br><span class="line">如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</span><br></pre></td></tr></table></figure></p><p>var o1 = {};<br>var o2 = o1;</p><p>o1.a = 1;<br>o2.a // 1</p><p>o2.b = 2;<br>o1.b // 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。</span><br></pre></td></tr></table></figure></p><p>({ foo: 123})<br>eval(‘{foo: 123}’) // 123<br>eval(‘({foo: 123})’) // {foo: 123}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看一个对象本身的所有属性，可以使用Object.keys方法。</span><br></pre></td></tr></table></figure><p>var obj = {<br>  key1: 1,<br>  key2: 2<br>};</p><p>Object.keys(obj);<br>// [‘key1’, ‘key2’]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">delete命令用于删除对象的属性，删除成功后返回true。</span><br></pre></td></tr></table></figure></p><p>var obj = { p: 1 };<br>Object.keys(obj) // [“p”]</p><p>delete obj.p // true<br>obj.p // undefined<br>Object.keys(obj) // []<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 属性的遍历：for...in 循环 </span><br><span class="line">for...in循环用来遍历一个对象的全部属性。</span><br><span class="line">* 它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</span><br><span class="line">* 它不仅遍历对象自身的属性，还遍历继承的属性。</span><br><span class="line">举例来说，对象都继承了toString属性，但是for...in循环不会遍历到这个属性。</span><br></pre></td></tr></table></figure></p><p>var obj = {a: 1, b: 2, c: 3};</p><p>for (var i in obj) {<br>  console.log(‘键名：’, i);<br>  console.log(‘键值：’, obj[i]);<br>}<br>// 键名： a<br>// 键值： 1<br>// 键名： b<br>// 键值： 2<br>// 键名： c<br>// 键值： 3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```with```语句的格式如下：它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</span><br><span class="line">* 注意，如果with区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</span><br></pre></td></tr></table></figure></p><p>with (对象) {<br>  语句;<br>}</p><p>// 例一<br>var obj = {<br>  p1: 1,<br>  p2: 2,<br>};<br>with (obj) {<br>  p1 = 4;<br>  p2 = 5;<br>}<br>// 等同于<br>obj.p1 = 4;<br>obj.p2 = 5;</p><p>// 例二<br>with (document.links[0]){<br>  console.log(href);<br>  console.log(title);<br>  console.log(style);<br>}<br>// 等同于<br>console.log(document.links[0].href);<br>console.log(document.links[0].title);<br>console.log(document.links[0].style);<br>var obj = {};<br>with (obj) {<br>  p1 = 4;<br>  p2 = 5;<br>}</p><p>obj.p1 // undefined<br>p1 // 4</p><p><code>`</code></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JavaScript学习心得</title>
      <link href="/2018/07/18/JavaScript%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
      <url>/2018/07/18/JavaScript%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/17/hello-world/"/>
      <url>/2018/07/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
